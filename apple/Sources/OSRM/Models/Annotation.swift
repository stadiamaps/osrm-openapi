//
// Annotation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct Annotation: Codable, Hashable {
    /** The distance, in meters, between each pair of coordinates. */
    public var distance: [Double]
    /** The duration between each pair of coordinates, in seconds. */
    public var duration: [Double]
    /** The index of the datasource for the speed between each pair of coordinates. 0 is the default profile. Other values are supplied via --segment-speed-file to osrm-contract. This is OSRM-specific and not supported by most other routers. */
    public var datasources: [Int]?
    /** The OSM node ID for each coordinate along the route (excluding the first/last user-supplied coordinates). This is not included in Valhalla-derived routers. */
    public var nodes: [Int]?
    public var weight: [Int]?
    /** The estimated speed of travel between each pair of coordinates in meters/sec. */
    public var speed: [Double]?
    public var maxspeed: [SpeedLimit]?

    public init(distance: [Double], duration: [Double], datasources: [Int]? = nil, nodes: [Int]? = nil, weight: [Int]? = nil, speed: [Double]? = nil, maxspeed: [SpeedLimit]? = nil) {
        self.distance = distance
        self.duration = duration
        self.datasources = datasources
        self.nodes = nodes
        self.weight = weight
        self.speed = speed
        self.maxspeed = maxspeed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case distance
        case duration
        case datasources
        case nodes
        case weight
        case speed
        case maxspeed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(distance, forKey: .distance)
        try container.encode(duration, forKey: .duration)
        try container.encodeIfPresent(datasources, forKey: .datasources)
        try container.encodeIfPresent(nodes, forKey: .nodes)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(speed, forKey: .speed)
        try container.encodeIfPresent(maxspeed, forKey: .maxspeed)
    }
}
