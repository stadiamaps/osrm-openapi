openapi: 3.0.1
info:
  title: OSRM API v5.22.0
  description: Open Source Routing Machine Models
  version: "1"
paths: {}
components:
  schemas:
    ApiResponse:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          enum:
            - Ok
            - InvalidUrl
            - InvalidService
            - InvalidVersion
            - InvalidOptions
            - InvalidQuery
            - InvalidValue
            - NoSegment
            - TooBig
            - NoRoute
            - NoTable
            - NotImplemented
            - NoTrips
        message:
          type: string
        data_version:
          type: string
          # format: date-time # TODO: Disabled because of missing swagger codegen kotlin adapter 
    NearestResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            waypoints:
              type: array
              items:
                $ref: '#/components/schemas/NearestWaypoint'
    RouteResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            waypoints:
              type: array
              items:
                $ref: '#/components/schemas/Waypoint'
            routes:
              type: array
              items:
                $ref: '#/components/schemas/Route'
    TableResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            durations:
              type: array
              items:
                type: array
                items:
                  type: number
                  format: double
              description: array of arrays that stores the matrix in row-major order. durations[i][j] gives the travel time from the i-th waypoint to the j-th waypoint. Values are given in seconds.
            distances:
              type: array
              items:
                type: array
                items:
                  type: number
                  format: double
            sources:
              type: array
              items:
                $ref: '#/components/schemas/Waypoint'
            destinations:
              type: array
              items:
                $ref: '#/components/schemas/Waypoint'
            fallback_speed_cells:
              type: array
              items:
                type: array
                items:
                  type: integer
    TripResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            waypoints:
              type: array
              items:
                $ref: '#/components/schemas/TripWaypoint'
            trips:
              type: array
              items:
                $ref: '#/components/schemas/Route'
    Route:
      type: object
      required:
        - distance
        - duration
        - geometry
        - legs
      properties:
        distance:
          type: number
          format: double
          description: The distance traveled by the route, in meters.
        duration:
          type: number
          format: double
          description: The estimated travel time, in number of seconds.
        geometry:  # FIXME
          type: string
          description: >-
            An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm).
        weight:
          type: number
          format: double
          description: >-
            The total cost of the route computed by the routing engine.
            This is a Valhalla extension to the OSRM spec.
        weight_name:
          type: string
          description: The costing model used for the route. This is an extension from Valhalla-based routers.
        legs:
          type: array
          items:
            $ref: '#/components/schemas/RouteLeg'
    RouteLeg:
      type: object
      required:
        - distance
        - duration
        - steps
      properties:
        distance:
          type: number
          format: double
          description: The distance traveled by the route, in meters.
        duration:
          type: number
          format: double
          description: The estimated travel time, in number of seconds.
        weight:
          type: number
          format: double
          description: >-
            The total cost of the leg computed by the routing engine.
            This is a Valhalla extension to the OSRM spec.
        summary:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RouteStep'
        annotation:
          $ref: '#/components/schemas/Annotation'
        via_waypoints:
          type: array
          nullable: true
          description: >-
            Indicates which waypoints are passed through rather than creating a new leg.
            This is a Valhalla extension to the OSRM spec.
          items:
            $ref: '#/components/schemas/ViaWaypoint'
    RouteStep:
      type: object
      description: >-
        A maneuver such as a turn or merge, followed by travel along a single road or path.
      required:
        - distance
        - duration
        - geometry
        - mode
        - maneuver
      properties:
        distance:
          type: number
          format: double
          description: The distance traveled by the route, in meters.
        duration:
          type: number
          format: double
          description: The estimated travel time, in number of seconds.
        geometry:
          type: object
        weight:
          type: number
          format: double
        name:
          type: string
          description: "The name of the segment (ex: road) being traversed"
        ref:
          type: string
          description: A reference number of code for the segment being traversed.
        pronunciation:
          type: string
          description: >-
            Pronunciation of the name (if available).
            The format of this varies by implementation/vendor.
        destinations:
          type: object
        exits:
          type: object
        mode:
          type: string
          description: The mode of travel.
        maneuver:
          $ref: '#/components/schemas/StepManeuver'
        intersections:
          type: array
          items:
            $ref: '#/components/schemas/Intersection'
        rotary_name:
          type: string
          description: The name of the traffic circle.
        rotary_pronunciation:
          type: string
          description: >-
            Pronunciation of the rotary name (if available).
            The format of this varies by implementation/vendor.
        driving_side:
          type: string
          enum:
            - left
            - right
          description: The side of the road on which driving is legal for this step.
        voiceInstructions:
          type: array
          items:
            $ref: '#/components/schemas/VoiceInstruction'
          description: >-
            A list of announcements which should be spoken at various points along the maneuver.
            This is a Valhalla extension to the OSRM spec.
        bannerInstructions:
          type: array
          items:
            $ref: '#/components/schemas/BannerInstruction'
          description: >-
            A list of announcements which should be displayed prominently on screen at various points along the maneuver.
            This is a Valhalla extension to the OSRM spec.
    Annotation:
      type: object
      properties:
        distance:
          type: array
          items:
            type: number
            format: double
          description: The distance, in meters, between each pair of coordinates.
        duration:
          type: array
          items:
            type: number
            format: double
          description: The duration between each pair of coordinates, in seconds.
        datasources:
          type: array
          items:
            type: integer
          description: >-
            The index of the datasource for the speed between each pair of coordinates.
            0 is the default profile.
            Other values are supplied via --segment-speed-file to osrm-contract.
            This is OSRM-specific and not supported by most other routers.
        nodes:
          type: array
          items:
            type: integer
          description: >-
            The OSM node ID for each coordinate along the route (excluding the first/last user-supplied coordinates).
            This is not included in Valhalla-derived routers.
        weight:
          type: array
          items:
            type: integer
        speed:
          type: array
          items:
            type: number
            format: double
          description: >-
            The estimated speed of travel between each pair of coordinates in meters/sec.
        maxspeed:
          type: array
          items:
            type: object
            properties:
              speed:
                type: integer
              unit:
                type: string
                enum:
                  - km/h
                  - mph
                description: >-
                  The unit of measure for the speed.
                  Always included if speed is present.
              unknown:
                type: boolean
                description: True if the speed limit is not known.
              none:
                type: boolean
                description: "True if there is no explicit speed limit (ex: some Autobahn sections)"
          description: >-
            The speed limit between the pair of coordinates.
            Available in Valhalla-derived routers.
    StepManeuver:
      type: object
      required:
        - location
        - bearing_before
        - bearing_after
        - type
      properties:
        location:
          $ref: '#/components/schemas/Coordinate'
        instruction:
          type: string
          description: >-
            A human-readable instruction for the maneuver.
            This is a Valhalla extension to the OSRM spec.
        bearing_before:
          type: integer
          description: >-
            The clockwise angle from true north to the direction of travel immediately before the maneuver.
        bearing_after:
          type: integer
          description: >-
            The clockwise angle from true north to the direction of travel immediately after the maneuver.
        type:
          type: string
          enum:
            - turn
            - new name
            - depart
            - arrive
            - merge
            - ramp
            - on ramp
            - off ramp
            - fork
            - end of road
            - use lane
            - continue
            - roundabout
            - rotary
            - roundabout turn
            - notification
        modifier:
          type: string
          enum:
            - uturn
            - sharp right
            - slight right
            - straight
            - slight left
            - left
            - sharp left
          description: >-
            An optional value indicating the directional change of the maneuver
            (further clarifying type).
        exit:
          type: integer
          description: The exit number to take (for roundabouts, rotaries, and number of intersections).
    Intersection:
      type: object
      description: >-
        Detailed information about intersections that the route traverses.
        For every step, the first intersection is at the location of the maneuver.
        Additional intersections will be provided for every road or path traversed
        until the next step.
      properties:
        location:
          $ref: '#/components/schemas/Coordinate'
        bearings:
          type: array
          items:
            type: integer
          description: >-
            A list of bearing values that are available for travel through the intersection.
        classes:
          type: array
          items:
            type: string
            enum:
              - toll
              - ferry
              - restricted
              - motorway
              - tunnel
          description: The classes of roads exiting the intersection.
        entry:
          type: array
          items:
            type: boolean
          description: >-
            A list of entry flags, which map 1:1 to the bearings.
            A value of true indicates that the respective road could be entered on a valid route.
            False indicates that the turn onto the respective road would violate a restriction.
        in:
          type: integer
          description: >-
            An index into bearings/entry array.
            Used to calculate the bearing just before the turn.
            Namely, the clockwise angle from true north to the direction of travel
            immediately before the maneuver/passing the intersection.
            Bearings are given relative to the intersection.
            To get the bearing in the direction of driving, the bearing has to be rotated by a value of 180.
            The value is not supplied for depart maneuvers.
        out:
          type: integer
          description: >-
            An index into bearings/entry array.
            Used to calculate the bearing just after the turn.
            Namely, the clockwise angle from true north to the direction of travel
            immediately after the maneuver/passing the intersection.
            This is not supplied for arrive maneuvers.
        lanes:
          type: array
          items:
            $ref: '#/components/schemas/Lane'
          description: >-
            Available turn lanes at the intersection.
            May be omitted if no lane information is available for the intersection.
        admin_index:
          type: integer
          description: >-
            The index into the admin boundaries list on the route leg.
            This is an extension that is not available on OSRM and may not be present on all Mapbox responses.
        duration:
          type: integer
          description: >-
            The estimated duration, in seconds, to traverse the intersection.
            This is a Valhalla extension to the OSRM spec.
    VoiceInstruction:
      type: object
      required:
        - distanceAlongGeometry
        - announcement
      properties:
        distanceAlongGeometry:
          type: number
          format: double
          description: How far (in meters) from the upcoming maneuver the instruction should be announced.
        announcement:
          type: string
          description: The plain-text announcement.
        ssmlAnnouncement:
          type: string
          description: >-
            The announcement in Speech Synthesis Markup Language (SSML).
            Supported TTS engines include Amazon Polly and Apple's AVSpeechSynthesizer.
    BannerInstruction:
      type: object
      required:
        - distanceAlongGeometry
        - primary
      properties:
        distanceAlongGeometry:
          type: number
          format: double
          description: How far (in meters) from the upcoming maneuver the instruction should start being displayed.
        primary:
          $ref: '#/components/schemas/BannerContent'
        secondary:
          $ref: '#/components/schemas/BannerContent'
    BannerContent:
      type: object
      required:
        - text
      properties:
        text:
          type: string
        type:
          type: string
          enum:
            - turn
            - new name
            - depart
            - arrive
            - merge
            - on ramp
            - off ramp
            - fork
            - end of road
            - continue
            - roundabout
            - rotary
            - roundabout turn
            - notification
            - exit roundabout
            - exit rotary
        modifier:
          type: string
          enum:
            - uturn
            - sharp right
            - right
            - slight right
            - slight left
            - left
            - sharp left
        components:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              type:
                type: string
                enum:
                  - text
                  - icon
                  - delimiter
                  - exit-number
                  - exit
                  - lane
          description: >-
            A list of objects with additional context that allow for visual layout improvements
            beyond what's possible with plain text.
    Lane:
      type: object
      properties:
        indications:
          type: array
          items:
            type: string
            enum:
              - none
              - uturn
              - sharp right
              - right
              - slight right
              - straight
              - slight left
              - left
              - sharp left
          description: >-
            A list of indication (e.g. marking on the road) specifying the turn lane.
            A road can have multiple indications (e.g. an arrow pointing straight and left).
        valid:
          type: boolean
          description: True if the lane is a valid choice for the current maneuver.
      required:
        - indications
        - valid
    Waypoint:
      type: object
      properties:
        name:
          type: string
        location:
          $ref: '#/components/schemas/Coordinate'
        distance:
          type: number
          format: double
          description: The distance of the snapped point from the original location.
        hint:
          type: string
      required:
        - location
        - distance
    ViaWaypoint:
      type: object
      properties:
        distance_from_start:
          type: number
          format: double
          description: The distance from the start of the leg, in meters.
        geometry_index:
          type: integer
          description: The index of the waypoint's location in the route geometry.
        waypoint_index:
          type: integer
          description: The index of the associated waypoint.
      required:
        - distance_from_start
        - geometry_index
        - waypoint_index
    NearestWaypoint:
      allOf:
        - $ref: '#/components/schemas/Waypoint'
        - type: object
          properties:
            nodes:
              type: array
              items:
                type: integer
    TripWaypoint:
      allOf:
        - $ref: '#/components/schemas/Waypoint'
        - type: object
          properties:
            trips_index:
              type: integer
            waypoint_index:
              type: integer
    Coordinate:
      type: array
      items:
        type: number
        format: double
      minItems: 2
      maxItems: 2
      description: A (longitude, latitude) coordinate pair.